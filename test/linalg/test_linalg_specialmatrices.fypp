#:include "common.fypp"
#:set R_KINDS_TYPES = list(zip(REAL_KINDS, REAL_TYPES, REAL_SUFFIX))
#:set KINDS_TYPES = R_KINDS_TYPES
module test_specialmatrices
    use testdrive, only : new_unittest, unittest_type, error_type, check, skip_test
    use stdlib_kinds, only: sp, dp, xdp, qp, int8, int16, int32, int64
    use stdlib_linalg, only: hermitian
    use stdlib_math, only: all_close
    use stdlib_specialmatrices

    implicit none

contains


    !> Collect all exported unit tests
    subroutine collect_suite(testsuite)
        !> Collection of tests
        type(unittest_type), allocatable, intent(out) :: testsuite(:)

        testsuite = [ &
            new_unittest('tridiagonal', test_tridiagonal) &
        ]
    end subroutine

    subroutine test_tridiagonal(error)
        !> Error handling
        type(error_type), allocatable, intent(out) :: error
        #:for k1, t1, s1 in (KINDS_TYPES)
        #:if k1 != "qp" and k1 != "xdp"
        block
            integer, parameter :: wp = ${k1}$
            integer, parameter :: n = 5
            type(Tridiagonal_${s1}$_type) :: A
            ${t1}$, allocatable :: Amat(:,:), dl(:), dv(:), du(:)
            ${t1}$, allocatable :: x(:)
            ${t1}$, allocatable :: y1(:), y2(:)

            ! Initialize matrix.
            allocate(dl(n-1), dv(n), du(n-1))
            call random_number(dl) ; call random_number(dv) ; call random_number(du)
            A = Tridiagonal(dl, dv, du) ; Amat = dense(A)

            ! Random vectors.
            allocate(x(n), source = 0.0_wp)   ; call random_number(x)
            allocate(y1(n), source = 0.0_wp)  ; allocate(y2(n), source=0.0_wp)

            ! Test y = A @ x
            y1 = matmul(Amat, x) ; call spmv(A, x, y2)
            call check(error, all_close(y1, y2))
            if (allocated(error)) return

            ! Test y = A.T @ x
            y1 = 0.0_wp ; y2 = 0.0_wp
            y1 = matmul(transpose(Amat), x) ; call spmv(A, x, y2, op="T")
            call check(error, all_close(y1, y2))
            if (allocated(error)) return

            #:if t1.startswith('complex') 
            ! Test y = A.H @ x
            y1 = 0.0_wp ; y2 = 0.0_wp
            y1 = matmul(hermitian(Amat), x) ; call spmv(A, x, y2, op="H")
            call check(error, all_close(y1, y2))
            if (allocated(error)) return
            #:endif
        end block
        #:endif
        #:endfor
    end subroutine

end module


program tester
    use, intrinsic :: iso_fortran_env, only : error_unit
    use testdrive, only : run_testsuite, new_testsuite, testsuite_type
    use test_specialmatrices, only : collect_suite
    implicit none
    integer :: stat, is
    type(testsuite_type), allocatable :: testsuites(:)
    character(len=*), parameter :: fmt = '("#", *(1x, a))'

    stat = 0

    testsuites = [ &
        new_testsuite("sparse", collect_suite) &
        ]

    do is = 1, size(testsuites)
        write(error_unit, fmt) "Testing:", testsuites(is)%name
        call run_testsuite(testsuites(is)%collect, error_unit, stat)
    end do

    if (stat > 0) then
        write(error_unit, '(i0, 1x, a)') stat, "test(s) failed!"
        error stop
    end if
end program
