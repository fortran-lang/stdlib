#:include "common.fypp"

module test_simps
    use stdlib_kinds, only: sp, dp, xdp, qp
    use testdrive, only : new_unittest, unittest_type, error_type, check, skip_test
    use stdlib_quadrature, only: simps, simps_weights

    implicit none

    #:for k1, t1 in REAL_KINDS_TYPES
    ${t1}$, parameter :: tol_${k1}$ = 1000 * epsilon(1.0_${k1}$)
    #:endfor

contains

    !> Collect all exported unit tests
    subroutine collect_simps(testsuite)
        !> Collection of tests
        type(unittest_type), allocatable, intent(out) :: testsuite(:)

        testsuite = [ &
            #:for k1, t1 in REAL_KINDS_TYPES[0:1] # set the first test independently to initialize the table
            new_unittest("simps_${k1}$", test_simps_sp) &
            #:endfor
            #:for k1, t1 in REAL_KINDS_TYPES[1:]
            , new_unittest("simps_${k1}$", test_simps_${k1}$) &
            #:endfor
            #:for k1, t1 in REAL_KINDS_TYPES
            , new_unittest("simps_weights_${k1}$", test_simps_weights_${k1}$) &
            #:endfor
            #:for k1, t1 in REAL_KINDS_TYPES
            , new_unittest("simps_zero_${k1}$", test_simps_zero_${k1}$) &
            #:endfor
            #:for k1, t1 in REAL_KINDS_TYPES
            , new_unittest("simps_even_${k1}$", test_simps_even_${k1}$) &
            #:endfor
            #:for k1, t1 in REAL_KINDS_TYPES
            , new_unittest("simps_weights_even_${k1}$", test_simps_weights_even_${k1}$) &
            #:endfor
            #:for k1, t1 in REAL_KINDS_TYPES
            , new_unittest("simps_six_${k1}$", test_simps_six_${k1}$) &
            #:endfor
            ]
    end subroutine collect_simps

    #:for k1, t1 in REAL_KINDS_TYPES
    subroutine test_simps_${k1}$(error)
        !> Error handling
        type(error_type), allocatable, intent(out) :: error

        integer, parameter :: n = 13
        ${t1}$ :: y(n)
        ${t1}$ :: x(n)
        ${t1}$ :: val
        ${t1}$ :: ans
        integer :: i


        y = [(real(i-1, sp)**2, i = 1, n)]

        val = simps(y, 1.0_${k1}$)
        ans = 576.0_${k1}$
        call check(error, val, ans, thr=tol_${k1}$)
        if (allocated(error)) return

        val = simps(y, 0.5_${k1}$)
        ans = 288.0_${k1}$
        call check(error, val, ans, thr=tol_${k1}$)
        if (allocated(error)) return

        x = [(0.25_${k1}$*(i-1), i = 1, n)]
        val = simps(y, x)
        ans = 144.0_${k1}$
        call check(error, val, ans, thr=tol_${k1}$)
    end subroutine test_simps_${k1}$

    subroutine test_simps_weights_${k1}$(error)
        !> Error handling
        type(error_type), allocatable, intent(out) :: error

        integer, parameter :: n = 17
        ${t1}$ :: y(n)
        ${t1}$ :: x(n)
        ${t1}$ :: w(n)
        integer :: i
        ${t1}$ :: val
        ${t1}$ :: ans


        y = [(real(i-1, sp), i = 1, n)]

        x = y
        w = simps_weights(x)
        val = sum(w*y)
        ans = simps(y, x)
        call check(error, val, ans, thr=tol_${k1}$)
    end subroutine test_simps_weights_${k1}$
    
    subroutine test_simps_zero_${k1}$(error)
        !> Error handling
        type(error_type), allocatable, intent(out) :: error

        ${t1}$, dimension(0) :: a


        call check(error, abs(simps(a, 1.0_${k1}$)) < epsilon(0.0_${k1}$))
        if (allocated(error)) return
        call check(error, abs(simps([1.0_${k1}$], 1.0_${k1}$)) < epsilon(0.0_${k1}$))
        if (allocated(error)) return
        call check(error, abs(simps(a, a)) < epsilon(0.0_${k1}$))
        if (allocated(error)) return
        call check(error, abs(simps([1.0_${k1}$], [1.0_${k1}$])) < epsilon(0.0_${k1}$))
    end subroutine test_simps_zero_${k1}$

    subroutine test_simps_even_${k1}$(error)
        !> Error handling
        type(error_type), allocatable, intent(out) :: error

        integer, parameter :: n = 11
        ${t1}$ :: y(n)
        ${t1}$ :: x(n)
        ${t1}$ :: val
        ${t1}$ :: ans
        integer :: i
        integer :: even


        y = [(3.0_${k1}$*real(i-1, sp)**2, i = 1, n)]

        do even = -1, 1

            val = simps(y, 1.0_${k1}$)
            ans = 1000.0_${k1}$
            call check(error, val, ans, thr=tol_${k1}$)
            if (allocated(error)) return

            val = simps(y, 0.5_${k1}$)
            ans = 500.0_${k1}$
            call check(error, val, ans, thr=tol_${k1}$)
            if (allocated(error)) return

            x = [(0.25_${k1}$*(i-1), i = 1, n)]
            val = simps(y, x)
            ans = 250.0_${k1}$
            call check(error, val, ans, thr=tol_${k1}$)
            if (allocated(error)) return
        end do
    end subroutine test_simps_even_${k1}$

    subroutine test_simps_weights_even_${k1}$(error)
        !> Error handling
        type(error_type), allocatable, intent(out) :: error

        integer, parameter :: n = 16
        ${t1}$ :: y(n)
        ${t1}$ :: x(n)
        ${t1}$ :: w(n)
        integer :: i
        ${t1}$ :: val
        ${t1}$ :: ans
        integer :: even


        y = [(real(i-1, sp), i = 1, n)]
        x = y

        do even = -1, 1
            w = simps_weights(x)
            val = sum(w*y)
            ans = simps(y, x)
            call check(error, val, ans, thr=tol_${k1}$)
            if (allocated(error)) return
        end do
    end subroutine test_simps_weights_even_${k1}$

    subroutine test_simps_six_${k1}$(error)
        !> Error handling
        type(error_type), allocatable, intent(out) :: error

        integer, parameter :: n = 6
        ${t1}$ :: y(n)
        ${t1}$ :: x(n)
        ${t1}$ :: val
        ${t1}$ :: ans
        integer :: i
        integer :: even


        y = [(3.0_${k1}$*real(i-1, sp)**2, i = 1, n)]

        do even = -1, 1

            val = simps(y, 1.0_${k1}$)
            ans = 125.0_${k1}$
            call check(error, val, ans, thr=tol_${k1}$)
            if (allocated(error)) return

            val = simps(y, 0.5_${k1}$)
            ans = 62.5_${k1}$
            call check(error, val, ans, thr=tol_${k1}$)
            if (allocated(error)) return

            x = [(0.25_${k1}$*(i-1), i = 1, n)]
            val = simps(y, x)
            ans = 31.25_${k1}$
            call check(error, val, ans, thr=tol_${k1}$)
            if (allocated(error)) return
        end do
    end subroutine test_simps_six_${k1}$
    
    #:endfor

end module


program tester
    use, intrinsic :: iso_fortran_env, only : error_unit
    use testdrive, only : run_testsuite, new_testsuite, testsuite_type
    use test_simps, only : collect_simps
    implicit none
    integer :: stat, is
    type(testsuite_type), allocatable :: testsuites(:)
    character(len=*), parameter :: fmt = '("#", *(1x, a))'

    stat = 0

    testsuites = [ &
        new_testsuite("simps", collect_simps) &
        ]

    do is = 1, size(testsuites)
        write(error_unit, fmt) "Testing:", testsuites(is)%name
        call run_testsuite(testsuites(is)%collect, error_unit, stat)
    end do

    if (stat > 0) then
        write(error_unit, '(i0, 1x, a)') stat, "test(s) failed!"
        error stop
    end if
end program
