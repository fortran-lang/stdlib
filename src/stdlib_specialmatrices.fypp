#:include "common.fypp"
#:set RANKS = range(1, 2+1)
#:set R_KINDS_TYPES = list(zip(REAL_KINDS, REAL_TYPES, REAL_SUFFIX))
#:set C_KINDS_TYPES = list(zip(CMPLX_KINDS, CMPLX_TYPES, CMPLX_SUFFIX))
#:set KINDS_TYPES = R_KINDS_TYPES+C_KINDS_TYPES
module stdlib_specialmatrices
    use ieee_arithmetic
    use stdlib_linalg_constants
    implicit none
    private
    public :: Tridiagonal
    public :: spmv
    public :: dense, transpose, hermitian
    public :: operator(*), operator(+), operator(-)

    !--------------------------------------
    !-----                           ------
    !-----     TYPE DEFINITIONS      ------
    !-----                           ------
    !--------------------------------------

    !! Version: experimental
    !!
    !! Tridiagonal matrix
    #:for k1, t1, s1 in (KINDS_TYPES)
    type, public :: Tridiagonal_${s1}$_type
        private
        ${t1}$, allocatable :: dl(:), dv(:), du(:)
        integer(ilp) :: n
    end type
    #:endfor

    !--------------------------------
    !-----                      -----
    !-----     CONSTRUCTORS     -----
    !-----                      -----
    !--------------------------------

    interface Tridiagonal
        !! This interface provides different methods to construct a
        !! `Tridiagonal` matrix. Only the non-zero elements of \( A \) are
        !! stored, i.e.
        !!
        !! \[
        !!    A
        !!    =
        !!    \begin{bmatrix}
        !!       a_1   &  b_1  \\
        !!       c_1  &  a_2      &  b_2  \\
        !!             &  \ddots   &  \ddots   &  \ddots   \\
        !!             &           &  c_{n-2} &  a_{n-1}  &  b_{n-1} \\
        !!             &           &           &  c_{n-1} &  a_n
        !!    \end{bmatrix}.
        !! \]
        !!
        !! #### Syntax
        !!
        !! - Construct a real `Tridiagonal` matrix from rank-1 arrays:
        !!
        !! ```fortran
        !!    integer, parameter :: n
        !!    real(dp), allocatable :: dl(:), dv(:), du(:)
        !!    type(Tridiagonal_rdp_type) :: A
        !!    integer :: i
        !!
        !!    dl = [(i, i=1, n-1)]; dv = [(2*i, i=1, n)]; du = [(3*i, i=1, n)]
        !!    A = Tridiagonal(dl, dv, du)
        !! ```
        !!
        !! - Construct a real `Tridiagonal` matrix with constant diagonals:
        !!
        !! ```fortran
        !!    integer, parameter :: n
        !!    real(dp), parameter :: a = 1.0_dp, b = 1.0_dp, c = 2.0_dp
        !!    type(Tridiagonal_rdp_type) :: A
        !!
        !!    A = Tridiagonal(a, b, c, n)
        !! ```
        #:for k1, t1, s1 in (KINDS_TYPES)
        pure module function initialize_tridiagonal_${s1}$(dl, dv, du) result(A)
            !! Construct a `Tridiagonal` matrix from the rank-1 arrays
            !! `dl`, `dv` and `du`.
            ${t1}$, intent(in) :: dl(:), dv(:), du(:)
            !! Tridiagonal matrix elements.
            type(Tridiagonal_${s1}$_type) :: A
            !! Corresponding Tridiagonal matrix.
        end function

        pure module function initialize_constant_tridiagonal_${s1}$(dl, dv, du, n) result(A)
            !! Construct a `Tridiagonal` matrix with constant elements.
            ${t1}$, intent(in) :: dl, dv, du
            !! Tridiagonal matrix elements.
            integer(ilp), intent(in) :: n
            !! Matrix dimension.
            type(Tridiagonal_${s1}$_type) :: A
            !! Corresponding Tridiagonal matrix.
        end function   
        #:endfor
    end interface

    !----------------------------------
    !-----                        -----
    !-----     LINEAR ALGEBRA     -----
    !-----                        -----
    !----------------------------------

    !! Version: experimental
    !!
    !! Apply the matrix-vector product $$y = \alpha * op(M) * x + \beta * y $$
    !! [Specifications](../page/specs/stdlib_specialmatrices.html#spmv)
    interface spmv
        #:for k1, t1, s1 in (KINDS_TYPES)
        #:for rank in RANKS
        #:if k1 != "qp" and k1 != "xdp"
        module subroutine spmv_tridiag_${rank}$d_${s1}$(A, x, y, alpha, beta, op)
         type(Tridiagonal_${s1}$_type), intent(in) :: A
            ${t1}$, intent(in), contiguous, target :: x${ranksuffix(rank)}$
            ${t1}$, intent(inout), contiguous, target :: y${ranksuffix(rank)}$
            real(${k1}$), intent(in), optional :: alpha
            real(${k1}$), intent(in), optional :: beta
            character(1), intent(in), optional :: op
        end subroutine
        #:endif
        #:endfor
        #:endfor
    end interface

    !-------------------------------------
    !-----                           -----
    !-----     UTILITY FUNCTIONS     -----
    !-----                           -----
    !-------------------------------------

    !! Version: experimental
    !!
    !! Convert a matrix of type `Tridiagonal` to its dense representation.
    !! [Specifications](../page/specs/stdlib_specialmatrices.html#dense)
    interface dense
        !! This interface provides methods to convert a `Tridiagonal` matrix
        !! to a regular rank-2 array.
        !!
        !! #### Syntax
        !!
        !! ```fortran
        !!    B = dense(A)
        !! ```
        #:for k1, t1, s1 in (KINDS_TYPES)
        pure module function tridiagonal_to_dense_${s1}$(A) result(B)
            !! Convert a `Tridiagonal` matrix to its dense representation.
            type(Tridiagonal_${s1}$_type), intent(in) :: A
            !! Input Tridiagonal matrix.
            ${t1}$, allocatable :: B(:, :)
            !! Corresponding dense matrix.
        end function
        #:endfor
    end interface

    !! Version: experimental
    !!
    !! Returns the transpose of a `Tridiagonal` matrix.
    !! [Specifications](../page/specs/stdlib_specialmatrices.html#transpose)
    interface transpose
        #:for k1, t1, s1 in (KINDS_TYPES)
        pure module function transpose_tridiagonal_${s1}$(A) result(B)
            type(Tridiagonal_${s1}$_type), intent(in) :: A
            !! Input matrix.
            type(Tridiagonal_${s1}$_type) :: B
        end function
        #:endfor
    end interface

    !! Version: experimental
    !!
    !! Returns the Hermitian of a `Tridiagonal` matrix.
    !! [Specifications](../page/specs/stdlib_specialmatrices.html#hermitian)
    interface hermitian
        #:for k1, t1, s1 in (KINDS_TYPES)
        pure module function hermitian_tridiagonal_${s1}$(A) result(B)
            type(Tridiagonal_${s1}$_type), intent(in) :: A
            !! Input matrix.
            type(Tridiagonal_${s1}$_type) :: B
        end function
        #:endfor
    end interface

    !----------------------------------------
    !-----                              -----
    !-----     ARITHMETIC OPERATORS     -----
    !-----                              -----
    !----------------------------------------

    !! Version: experimental
    !!
    !! Overloads the scalar multiplication `*` for `Tridiagonal` matrices.
    !! [Specifications](../page/specs/stdlib_specialmatrices.html#operator(*))
    interface operator(*)
        #:for k1, t1, s1 in (KINDS_TYPES)
        pure module function scalar_multiplication_tridiagonal_${s1}$(alpha, A) result(B)
            ${t1}$, intent(in) :: alpha
            type(Tridiagonal_${s1}$_type), intent(in) :: A
            type(Tridiagonal_${s1}$_type) :: B
        end function
        pure module function scalar_multiplication_bis_tridiagonal_${s1}$(A, alpha) result(B)
            type(Tridiagonal_${s1}$_type), intent(in) :: A
            ${t1}$, intent(in) :: alpha
            type(Tridiagonal_${s1}$_type) :: B
        end function
        #:endfor
    end interface

    !! Version: experimental
    !!
    !! Overloads the addition `+` for `Tridiagonal` matrices.
    !! [Specifications](../page/specs/stdlib_specialmatrices.html#operator(+))
    interface operator(+)
        #:for k1, t1, s1 in (KINDS_TYPES)
        pure module function matrix_add_tridiagonal_${s1}$(A, B) result(C)
            type(Tridiagonal_${s1}$_type), intent(in) :: A
            type(Tridiagonal_${s1}$_type), intent(in) :: B
            type(Tridiagonal_${s1}$_type) :: C
        end function
        #:endfor
    end interface

    !! Version: experimental
    !!
    !! Overloads the subtraction `-` for `Tridiagonal` matrices.
    !! [Specifications](../page/specs/stdlib_specialmatrices.html#operator(-))
    interface operator(-)
        #:for k1, t1, s1 in (KINDS_TYPES)
        pure module function matrix_sub_tridiagonal_${s1}$(A, B) result(C)
            type(Tridiagonal_${s1}$_type), intent(in) :: A
            type(Tridiagonal_${s1}$_type), intent(in) :: B
            type(Tridiagonal_${s1}$_type) :: C
        end function
        #:endfor
    end interface

end module stdlib_specialmatrices
