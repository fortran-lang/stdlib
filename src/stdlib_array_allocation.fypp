! SPDX-Identifier: MIT

#:include "common.fypp"
#:set RANKS = range(1, MAXRANK + 1)
#:set KINDS_TYPES = REAL_KINDS_TYPES + INT_KINDS_TYPES + CMPLX_KINDS_TYPES

submodule(stdlib_array) stdlib_array_allocation
    implicit none

contains

#:for k1, t1 in KINDS_TYPES
#:for rank in RANKS
    !> Allocate an instance of the array within the wrapper.
    module subroutine allocate_array_${t1[0]}$${k1}$_${rank}$(wrapper, source_array, stat, msg)
        class(t_array_wrapper), intent(out) :: wrapper
        ${t1}$, intent(in) :: source_array${ranksuffix(rank)}$
        integer, intent(out) :: stat
        character(len=:), allocatable, intent(out) :: msg

        allocate(t_array_${t1[0]}$${k1}$_${rank}$ :: wrapper%array, stat=stat)
        if (stat /= 0) then
            msg = "Failed to allocate array"; return
        end if

        ! select type (typed_array => wrapper%array)
        !   class is (t_array_${t1[0]}$${k1}$_${rank}$)
        !     typed_array%values = source_array
        !   class default
        !     msg = 'Failed to allocate values.'; stat = 1; return
        ! end select
    end

#:endfor
#:endfor
end
