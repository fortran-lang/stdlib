#:include "common.fypp"
#:set R_KINDS_TYPES = list(zip(REAL_KINDS, REAL_TYPES, REAL_SUFFIX))
#:set C_KINDS_TYPES = list(zip(CMPLX_KINDS, CMPLX_TYPES, CMPLX_SUFFIX))
#:set MATRIX_TYPES = ["dense", "CSR"]
#:set RANKS = range(1, 2+1)

module stdlib_linalg_iterative_solvers
    use stdlib_kinds
    use stdlib_sparse
    implicit none
    private 

    #:for k, t, s in R_KINDS_TYPES
    type, public :: linop_${s}$
        procedure(vector_sub_${s}$), nopass, pointer    :: matvec => null()
        procedure(vector_sub_${s}$), nopass, pointer    :: preconditionner => null()
        procedure(reduction_sub_${s}$), nopass, pointer :: inner_product => null()
    end type
    #:endfor

    #:for k, t, s in R_KINDS_TYPES
    type, public :: solver_workspace_${s}$
        ${t}$, allocatable :: tmp(:,:)
    end type 

    #:endfor

    abstract interface
        #:for k, t, s in R_KINDS_TYPES
        subroutine vector_sub_${s}$(x,y)
            import :: ${k}$
            ${t}$, intent(in)  :: x(:)
            ${t}$, intent(inout) :: y(:)
        end subroutine
        pure ${t}$ function reduction_sub_${s}$(x,y) result(r)
            import :: ${k}$
            ${t}$, intent(in) :: x(:)
            ${t}$, intent(in) :: y(:)
        end function
        #:endfor
    end interface

    interface solve_cg_generic
        #:for k, t, s in R_KINDS_TYPES
        module subroutine solve_cg_generic_${s}$(A,b,x,tol,maxiter,workspace)
            class(linop_${s}$), intent(in) :: A
            ${t}$, intent(in) :: b(:), tol
            ${t}$, intent(inout) :: x(:)
            integer, intent(in) :: maxiter
            type(solver_workspace_${s}$), intent(inout) :: workspace
        end subroutine
        #:endfor
    end interface
    public :: solve_cg_generic

    interface solve_cg
        #:for matrix in MATRIX_TYPES
        #:for k, t, s in R_KINDS_TYPES
        module subroutine solve_cg_${matrix}$_${s}$(A,b,x,tol,maxiter,workspace)
            #:if matrix == "dense"
            ${t}$, intent(in) :: A(:,:)
            #:else 
            type(${matrix}$_${s}$_type), intent(in) :: A
            #:endif
            ${t}$, intent(in) :: b(:), tol
            ${t}$, intent(inout) :: x(:)
            integer, intent(in), optional :: maxiter
            type(solver_workspace_${s}$), optional, intent(inout), target :: workspace
        end subroutine
        #:endfor
        #:endfor
    end interface
    public :: solve_cg
    
end module stdlib_linalg_iterative_solvers
