#:include "common.fypp"
#:set RANKS = range(1, 2+1)
#:set R_KINDS_TYPES = list(zip(REAL_KINDS, REAL_TYPES, REAL_SUFFIX))
#:set C_KINDS_TYPES = list(zip(CMPLX_KINDS, CMPLX_TYPES, CMPLX_SUFFIX))
#:set KINDS_TYPES = R_KINDS_TYPES+C_KINDS_TYPES
submodule (stdlib_specialmatrices) tridiagonal_matrices
    use stdlib_linalg_lapack, only: lagtm
    contains
    !! spmv_tridiag
    #:for k1, t1, s1 in (KINDS_TYPES)
    #:for rank in RANKS
    #:if k1 != "qp" and k1 != "xdp"
    module subroutine spmv_tridiag_${rank}$d_${s1}$(A, x, y, alpha, beta, op)
        type(Tridiagonal_${s1}$_type), intent(in) :: A
        ${t1}$, intent(in), contiguous, target :: x${ranksuffix(rank)}$
        ${t1}$, intent(inout), contiguous, target :: y${ranksuffix(rank)}$
        real(${k1}$), intent(in), optional :: alpha
        real(${k1}$), intent(in), optional :: beta
        character(1), intent(in), optional :: op

        ! Internal variables.
        real(${k1}$) :: alpha_, beta_
        integer(ilp) :: n, nrhs, ldx, ldy
        character(1) :: op_
        #:if rank == 1
        ${t1}$, pointer :: xmat(:, :), ymat(:, :)
        #:endif

        ! Deal with optional arguments.
        alpha_ = 1.0_${k1}$ ; if (present(alpha)) alpha_ = alpha
        beta_  = 0.0_${k1}$ ; if (present(beta))  beta_  = beta
        op_    = "N"        ; if (present(op))    op_    = op

        ! Prepare Lapack arguments.
        n = A%n ; ldx = n ; ldy = n ; y = 0.0_${k1}$
        nrhs = #{if rank==1}# 1 #{else}# size(x, 2) #{endif}#

        #:if rank == 1
        ! Pointer trick.
        xmat(1:n, 1:nrhs) => x ; ymat(1:n, 1:nrhs) => y
        call lagtm(op_, n, nrhs, alpha_, A%dl, A%dv, A%du, xmat, ldx, beta_, ymat, ldy)
        #:else
        call lagtm(op_, n, nrhs, alpha_, A%dl, A%dv, A%du, x, ldx, beta_, y, ldy)
        #:endif
    end subroutine
    #:endif
    #:endfor
    #:endfor
end submodule
