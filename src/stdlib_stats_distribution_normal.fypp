#:include "common.fypp"
#:set RC_KINDS_TYPES = REAL_KINDS_TYPES + CMPLX_KINDS_TYPES
Module stdlib_stats_distribution_normal
    use stdlib_kinds
    use stdlib_error, only : error_stop
    use stdlib_stats_distribution_PRNG, only : dist_rand
    use stdlib_stats_distribution_uniform, only : uni=>uniform_distribution_rvs

    implicit none
    private

    real(dp), parameter  :: HALF = 0.5_dp, ONE = 1.0_dp, TWO = 2.0_dp
    integer, save :: kn(0:127)
    real(dp), save :: wn(0:127), fn(0:127)
    logical, save  :: zig_norm_initialized = .false.

    public :: normal_distribution_rvs
    public :: normal_distribution_pdf
    public :: normal_distribution_cdf

    interface normal_distribution_rvs
    !! Version experimental
    !!
    !! Normal Distribution Random Variates
    !!([Specification](../page/specs/stdlib_stats_distribution_normal.html#
    !! description))
    !!
        module procedure norm_dist_rvs_0_rsp                  !0 dummy variable

        #:for k1, t1 in RC_KINDS_TYPES
        module procedure norm_dist_rvs_${t1[0]}$${k1}$        !2 dummy variables
        #:endfor

        #:for k1, t1 in RC_KINDS_TYPES
        module procedure norm_dist_rvs_array_${t1[0]}$${k1}$  !3 dummy variables
        #:endfor
    end interface normal_distribution_rvs

    interface normal_distribution_pdf
    !! Version experimental
    !!
    !! Normal Distribution Probability Density Function
    !!([Specification](../page/specs/stdlib_stats_distribution_normal.html#
    !! description))
    !!
        #:for k1, t1 in RC_KINDS_TYPES
        module procedure norm_dist_pdf_${t1[0]}$${k1}$
        #:endfor
    end interface normal_distribution_pdf

    interface normal_distribution_cdf
    !! Version experimental
    !!
    !! Normal Distribution Cumulative Distribution Function
    !!([Specification](../page/specs/stdlib_stats_distribution_normal.html#
    !! description))
    !!
        #:for k1, t1 in RC_KINDS_TYPES
        module procedure norm_dist_cdf_${t1[0]}$${k1}$
        #:endfor
    end interface normal_distribution_cdf


    contains

    subroutine zigset
    ! Marsaglia & Tsang generator for random normals & random exponentials.
    ! Translated from C by Alan Miller (amiller@bigpond.net.au)
    !
    ! Marsaglia, G. & Tsang, W.W. (2000) `The ziggurat method for generating
    ! random variables', J. Statist. Software, v5(8).
    !
    ! This is an electronic journal which can be downloaded from:
    ! http://www.jstatsoft.org/v05/i08
    !
    ! N.B. It is assumed that all integers are 32-bit.
    !
    ! Latest version - 1 January 2001
    !
        real(dp), parameter :: M1 = 2147483648.0_dp
        real(dp)            :: dn = 3.442619855899_dp, tn,                      &
                               vn = 0.00991256303526217_dp, q
        integer :: i

        tn = dn
        !  tables for random normals
        q = vn * exp(HALF * dn * dn)
        kn(0) = int((dn / q) * M1, kind = int32)
        kn(1) = 0
        wn(0) = q / M1
        wn(127) = dn / M1
        fn(0) = ONE
        fn(127) = exp( -HALF * dn * dn )
        do  i = 126, 1, -1
            dn = sqrt( -TWO * log( vn / dn + exp( -HALF * dn * dn ) ) )
            kn(i+1) = int((dn / tn) * M1, kind = int32)
            tn = dn
            fn(i) = exp(-HALF * dn * dn)
            wn(i) = dn / M1
        end do
        zig_norm_initialized = .true.
        return
    end subroutine zigset

    #:for k1, t1 in REAL_KINDS_TYPES
    impure elemental function norm_dist_rvs_0_${t1[0]}$${k1}$( ) result(res)
    ! Standard normal random vairate (0,1)
    !
        ${t1}$ :: res
        ${t1}$, parameter  ::  r = 3.442619855899_${k1}$, rr = 1.0_${k1}$ / r
        ${t1}$ ::  x, y
        integer :: hz, iz

        if( .not. zig_norm_initialized ) call zigset
        iz = 0
        ! original algorithm use 32bit
        hz = dist_rand(1_int32)

        iz = iand( hz, 127 )
        if( abs( hz ) < kn(iz) ) then
            res = hz * wn(iz)
        else
            L1: do
                L2: if( iz == 0 ) then
                    do
                        x = -log( uni(1.0_${k1}$) ) * rr
                        y = -log( uni(1.0_${k1}$) )
                        if( y + y >= x * x ) exit
                    end do
                    res = r + x
                    if( hz <= 0 ) res = -res
                    exit L1
                end if L2
                x = hz * wn(iz)
                if( fn(iz) + uni(1.0_${k1}$) * (fn(iz-1) - fn(iz)) <            &
                    exp(-HALF * x * x) ) then
                    res = x
                    exit L1
                end if

                !original algorithm use 32bit
                hz = dist_rand(1_int32)
                iz = iand( hz, 127 )
                if( abs( hz ) < kn(iz) ) then
                    res = hz * wn(iz)
                    exit L1
                end if
            end do L1
        end if
        return
    end function norm_dist_rvs_0_${t1[0]}$${k1}$

    #:endfor

    #:for k1, t1 in REAL_KINDS_TYPES
    impure elemental function norm_dist_rvs_${t1[0]}$${k1}$(loc, scale)         &
                     result(res)
    ! Normal random variate (loc, scale)
    !
        ${t1}$, intent(in) :: loc, scale
        ${t1}$ :: res
        ${t1}$, parameter  ::  r = 3.442619855899_${k1}$, rr = 1.0_${k1}$ / r
        ${t1}$ ::  x, y
        integer :: hz, iz

        if(scale==0._${k1}$) call error_stop("Error(norm_dist_rvs): Normal"     &
                        //" distribution scale parameter must be non-zero")
        if( .not. zig_norm_initialized ) call zigset
        iz = 0
        ! original algorithm use 32bit
        hz = dist_rand(1_int32)

        iz = iand( hz, 127 )
        if( abs( hz ) < kn(iz) ) then
            res = hz * wn(iz)
        else
            L1: do
                L2: if( iz == 0 ) then
                    do
                        x = -log( uni(1.0_${k1}$) ) * rr
                        y = -log( uni(1.0_${k1}$) )
                        if( y + y >= x * x ) exit
                    end do
                    res = r + x
                    if( hz <= 0 ) res = -res
                    exit L1
                end if L2
                x = hz * wn(iz)
                if( fn(iz) + uni(1.0_${k1}$) * (fn(iz-1) - fn(iz)) <            &
                    exp(-HALF * x * x) ) then
                    res = x
                    exit L1
                end if

                !original algorithm use 32bit
                hz = dist_rand(1_int32)
                iz = iand( hz, 127 )
                if( abs( hz ) < kn(iz) ) then
                    res = hz * wn(iz)
                    exit L1
                end if
            end do L1
        end if
        res = res * scale + loc
        return
    end function norm_dist_rvs_${t1[0]}$${k1}$

    #:endfor

    #:for k1, t1 in CMPLX_KINDS_TYPES
    impure elemental function norm_dist_rvs_${t1[0]}$${k1}$(loc, scale)         &
                     result(res)
    ! Normal distributed complex. The real part and imaginary part are          &
    ! independent of each other.
    !
        ${t1}$, intent(in) :: loc, scale
        ${t1}$ :: res
        real(${k1}$) :: tr, ti

        tr = norm_dist_rvs_r${k1}$(real(loc), real(scale))
        ti = norm_dist_rvs_r${k1}$(aimag(loc), aimag(scale))
        res = cmplx(tr, ti, kind=${k1}$)
        return
    end function norm_dist_rvs_${t1[0]}$${k1}$

    #:endfor

    #:for k1, t1 in REAL_KINDS_TYPES
    function norm_dist_rvs_array_${t1[0]}$${k1}$(loc, scale, array_size)        &
             result(res)
        ${t1}$, intent(in) :: loc, scale
        integer, intent(in) :: array_size
        ${t1}$, allocatable :: res(:)
        ${t1}$, parameter  ::  r = 3.442619855899_${k1}$, rr = 1.0_${k1}$ / r
        ${t1}$ ::  x, y, re
        integer :: hz, iz, i

        if(scale==0._${k1}$) call error_stop("Error(norm_dist_rvs_array):"      &
                    //" Normal distribution scale parameter must be non-zero")
        if( .not. zig_norm_initialized ) call zigset
        allocate(res(array_size))
        do i = 1, array_size
            iz = 0
            ! original algorithm use 32bit
            hz = dist_rand(1_int32)

            iz = iand( hz, 127 )
            if( abs( hz ) < kn(iz) ) then
                re = hz * wn(iz)
            else
                L1: do
                    L2: if( iz == 0 ) then
                        do
                            x = -log( uni(1.0_${k1}$) ) * rr
                            y = -log( uni(1.0_${k1}$) )
                            if( y + y >= x * x ) exit
                        end do
                        re = r + x
                        if( hz <= 0 ) re = -re
                        exit L1
                    end if L2
                    x = hz * wn(iz)
                    if( fn(iz) + uni(1.0_${k1}$) * (fn(iz-1) - fn(iz)) <        &
                        exp(-HALF * x * x) ) then
                        re = x
                        exit L1
                    end if

                    !original algorithm use 32bit
                    hz = dist_rand(1_int32)
                    iz = iand( hz, 127 )
                    if( abs( hz ) < kn(iz) ) then
                        re = hz * wn(iz)
                        exit L1
                    end if
                end do L1
            end if
            res(i) = re * scale + loc
        end do
        return
    end function norm_dist_rvs_array_${t1[0]}$${k1}$

    #:endfor

    #:for k1, t1 in CMPLX_KINDS_TYPES
    function norm_dist_rvs_array_${t1[0]}$${k1}$(loc, scale, array_size)        &
             result(res)
        ${t1}$, intent(in) :: loc, scale
        integer, intent(in) :: array_size
        integer :: i
        ${t1}$, allocatable :: res(:)
        real(${k1}$) :: tr, ti

        allocate(res(array_size))
        do i = 1, array_size
            tr = norm_dist_rvs_r${k1}$(real(loc), real(scale))
            ti = norm_dist_rvs_r${k1}$(aimag(loc), aimag(scale))
            res(i) = cmplx(tr, ti, kind=${k1}$)
        end do
        return
    end function norm_dist_rvs_array_${t1[0]}$${k1}$

    #:endfor

    #:for k1, t1 in REAL_KINDS_TYPES
    impure elemental function norm_dist_pdf_${t1[0]}$${k1}$(x, loc, scale)      &
                     result(res)
    ! Normal distributed probability function
    !
        ${t1}$, intent(in) :: x, loc, scale
        real :: res
        ${t1}$, parameter :: sqrt_2_pi = sqrt(2.0_${k1}$ * acos(-1.0_${k1}$))

        if(scale==0._${k1}$) call error_stop("Error(norm_dist_pdf):"            &
                    //" Normal distribution scale parameter must be non-zero")
        res = exp(- 0.5_${k1}$ * (x - loc) * (x - loc) / (scale * scale)) /     &
              (sqrt_2_Pi * scale)
        return
    end function norm_dist_pdf_${t1[0]}$${k1}$

    #:endfor

    #:for k1, t1 in CMPLX_KINDS_TYPES
    impure elemental function norm_dist_pdf_${t1[0]}$${k1}$(x, loc, scale)      &
                     result(res)
        ${t1}$, intent(in) :: x, loc, scale
        real :: res

        res = norm_dist_pdf_r${k1}$(real(x), real(loc), real(scale))
        res = res * norm_dist_pdf_r${k1}$(aimag(x), aimag(loc), aimag(scale))
        return
    end function norm_dist_pdf_${t1[0]}$${k1}$

    #:endfor

    #:for k1, t1 in REAL_KINDS_TYPES
    impure elemental function norm_dist_cdf_${t1[0]}$${k1}$(x, loc, scale)      &
                     result(res)
    ! Normal random cumulative distribution function
    !
        ${t1}$, intent(in) :: x, loc, scale
        real :: res
        ${t1}$, parameter :: sqrt_2 = sqrt(2.0_${k1}$)

        if(scale==0._${k1}$) call error_stop("Error(norm_dist_cdf):"            &
                    //" Normal distribution scale parameter must be non-zero")
        res = (1.0_${k1}$ + erf((x - loc) / (scale * sqrt_2))) / 2.0_${k1}$
        return
    end function norm_dist_cdf_${t1[0]}$${k1}$

    #:endfor

    #:for k1, t1 in CMPLX_KINDS_TYPES
    impure elemental function norm_dist_cdf_${t1[0]}$${k1}$(x, loc, scale)      &
                     result(res)
        ${t1}$, intent(in) :: x, loc, scale
        real :: res

        res = norm_dist_cdf_r${k1}$(real(x), real(loc), real(scale))
        res = res * norm_dist_cdf_r${k1}$(aimag(x), aimag(loc), aimag(scale))
        return
    end function norm_dist_cdf_${t1[0]}$${k1}$

    #:endfor

end module stdlib_stats_distribution_normal