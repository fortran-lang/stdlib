#:include "common.fypp"
#:set RANKS = range(1, 2+1)
#:set R_KINDS_TYPES = list(zip(REAL_KINDS, REAL_TYPES, REAL_SUFFIX))
#:set C_KINDS_TYPES = list(zip(CMPLX_KINDS, CMPLX_TYPES, CMPLX_SUFFIX))
#:set KINDS_TYPES = R_KINDS_TYPES+C_KINDS_TYPES
submodule (stdlib_specialmatrices) symtridiagonal_matrices
    use stdlib_linalg_lapack, only: lagtm

    character(len=*), parameter :: this = "symtridiagonal matrices"
    contains

    !--------------------------------
    !-----                      -----
    !-----     CONSTRUCTORS     -----
    !-----                      -----
    !--------------------------------

    #:for k1, t1, s1 in (KINDS_TYPES)
    pure module function initialize_symtridiagonal_pure_${s1}$(dv, ev) result(A)
        !! Construct a `symtridiagonal` matrix from the rank-1 arrays
        !! `dl`, `dv` and `du`.
        ${t1}$, intent(in) :: dv(:), ev(:)
        !! symtridiagonal matrix elements.
        type(symtridiagonal_${s1}$_type) :: A
        !! Corresponding symtridiagonal matrix.

        ! Internal variables.
        integer(ilp) :: n
        type(linalg_state_type) :: err0

        ! Sanity check.
        n = size(dv, kind=ilp)
        if (n <= 0) then
            err0 = linalg_state_type(this, LINALG_VALUE_ERROR, "Matrix size needs to be positive, n = ", n, ".")
            call linalg_error_handling(err0)
        endif
        if (size(ev, kind=ilp) /= n-1) then
            err0 = linalg_state_type(this, LINALG_VALUE_ERROR, "Vector ev does not have the correct length.")
            call linalg_error_handling(err0)
        endif

        ! Description of the matrix.
        A%n = n
        ! Matrix elements.
        A%dl = ev ; A%dv = dv ; A%du = ev
    end function

    pure module function initialize_constant_symtridiagonal_pure_${s1}$(dv, ev, n) result(A)
        !! Construct a `symtridiagonal` matrix with constant elements.
        ${t1}$, intent(in) :: dv, ev
        !! symtridiagonal matrix elements.
        integer(ilp), intent(in) :: n
        !! Matrix dimension.
        type(symtridiagonal_${s1}$_type) :: A
        !! Corresponding symtridiagonal matrix.

        ! Internal variables.
        integer(ilp) :: i
        type(linalg_state_type) :: err0

        ! Description of the matrix.
        A%n = n
        if (n <= 0) then
            err0 = linalg_state_type(this, LINALG_VALUE_ERROR, "Matrix size needs to be positive, n = ", n, ".")
            call linalg_error_handling(err0)
        endif
        ! Matrix elements.
        A%dl = [(ev, i = 1, n-1)]
        A%dv = [(dv, i = 1, n-1)]
        A%du = [(ev, i = 1, n-1)]
    end function

    module function initialize_symtridiagonal_impure_${s1}$(dv, ev, err) result(A)
        !! Construct a `symtridiagonal` matrix from the rank-1 arrays
        !! `dl`, `dv` and `du`.
        ${t1}$, intent(in) :: dv(:), ev(:)
        !! symtridiagonal matrix elements.
        type(linalg_state_type), intent(out) :: err
        !! Error handling.
        type(symtridiagonal_${s1}$_type) :: A
        !! Corresponding symtridiagonal matrix.

        ! Internal variables.
        integer(ilp) :: n
        type(linalg_state_type) :: err0

        ! Sanity check.
        n = size(dv, kind=ilp)
        if (n <= 0) then
            err0 = linalg_state_type(this, LINALG_VALUE_ERROR, "Matrix size needs to be positive, n = ", n, ".")
            call linalg_error_handling(err0, err)
        endif
        if (size(ev, kind=ilp) /= n-1) then
            err0 = linalg_state_type(this, LINALG_VALUE_ERROR, "Vector ev does not have the correct length.")
            call linalg_error_handling(err0, err)
        endif

        ! Description of the matrix.
        A%n = n
        ! Matrix elements.
        A%dl = ev ; A%dv = dv ; A%du = ev
    end function

    module function initialize_constant_symtridiagonal_impure_${s1}$(dv, ev, n, err) result(A)
        !! Construct a `symtridiagonal` matrix with constant elements.
        ${t1}$, intent(in) :: dv, ev
        !! symtridiagonal matrix elements.
        integer(ilp), intent(in) :: n
        !! Matrix dimension.
        type(linalg_state_type), intent(out) :: err
        !! Error handling
        type(symtridiagonal_${s1}$_type) :: A
        !! Corresponding symtridiagonal matrix.

        ! Internal variables.
        integer(ilp) :: i
        type(linalg_state_type) :: err0

        ! Description of the matrix.
        A%n = n
        if (n <= 0) then
            err0 = linalg_state_type(this, LINALG_VALUE_ERROR, "Matrix size needs to be positive, n = ", n, ".")
            call linalg_error_handling(err0, err)
        endif
        ! Matrix elements.
        A%dl = [(ev, i = 1, n)]
        A%dv = [(dv, i = 1, n-1)]
        A%du = [(ev, i = 1, n)]
    end function
    #:endfor

end submodule
