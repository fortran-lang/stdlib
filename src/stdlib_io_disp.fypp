#:include "common.fypp"
#:set ALL_KINDS_TYPES = REAL_KINDS_TYPES + CMPLX_KINDS_TYPES + INT_KINDS_TYPES + LOG_KINDS_TYPES + STRING_KINDS_TYPES

submodule (stdlib_io) stdlib_io_disp

    use, intrinsic :: iso_fortran_env, only: output_unit
    use stdlib_string_type, only: char, len
    use stdlib_strings, only: to_string
    implicit none

contains

#!                  | string | data elem 1 | unknown width |  sep  | string | line 1 | defined width |
#! Any type data -> | string | data elem 2 | unknown width |  -->  | string | line 2 | defined width | -> sequncetial output
#!                  | ...    | ...         | ...           |  add  | ...    | ...    | ...           |

    #! REAL, COMPLEX, INTEGER, LOGICAL, STRING_TYPE
    #:for r1 in range(0, 3)
    #:for k1, t1 in ALL_KINDS_TYPES
    module subroutine disp_${r1}$_${t1[0]}$${k1}$(x, header, unit, brief, format, width, sep)
    
        ${t1}$, intent(in) :: x${ranksuffix(r1)}$
        character(len=*), intent(in), optional :: header
        integer, intent(in), optional :: unit
        logical, intent(in), optional :: brief
        character(len=*), intent(in), optional :: format
        integer, intent(in), optional :: width
        character(len=*), intent(in), optional :: sep
        
        integer :: unit_, width_#{if r1 == 2}#, max_elem_len#{endif}#
        logical :: brief_
        character(len=:), allocatable :: format_, sep_
        #{if r1 != 0 and not(r1 == 1 and k1 == "string_type")}#integer :: i#{endif}#
        #{if r1 == 2 and k1 != "string_type"}#integer :: j#{endif}#
        #{if k1 != "string_type"}#type(string_type), allocatable :: x_str${ranksuffix(r1)}$#{endif}#
        #{if r1 != 0}#type(string_type) :: array_info#{endif}#
        
        #! State default values
        unit_   = optval(unit, output_unit)
        brief_  = optval(brief, .false.)
        format_ = optval(format, "g0.4")
        
        #! width have to be greater than or equal 80 by default
        width_  = optval(width, 80)
        width_  = merge(width_, 80, width_ > 80)
        
        sep_    = optval(sep, "  ")
            
        #! Prints header
        if (present(header)) then
            write(unit_, "(A)") format_output_string([string_type(header)], width_, brief_, "", len(header))
        end if
        
        #:if k1 != "string_type"
        
            #:if r1 == 0
                allocate(x_str)
                x_str = string_type(to_string(x, format_))
                write(unit_, "(A)") format_output_string([x_str], width_, brief_, sep_, len(x_str))
            
            #:elif r1 == 1
                array_info = array_info_maker(size(x, 1))
                write(unit_, "(A)") format_output_string([array_info], width_, brief_, "", len(array_info))
            
                allocate(x_str(size(x, 1)))
                do i = 1, size(x, 1)
                    x_str(i) = string_type(to_string(x(i), format_))
                end do
                write(unit_, "(*(A))") format_output_string(x_str, width_, brief_, sep_, maxval(len(x_str)))
            
            #:elif r1 == 2
            
                array_info = array_info_maker(size(x, 1), size(x, 2))
                write(unit_, "(A)") format_output_string([array_info], width_, brief_, "", len(array_info))
                
                allocate(x_str(size(x, 1), size(x, 2)))
                do i = 1, size(x, 1)
                    do j = 1, size(x, 2)
                        x_str(i, j) = string_type(to_string(x(i, j), format_))
                    end do
                end do
                
                max_elem_len = maxval(len(x_str))
                
                #! Brief mode of rank-2 array
                if (brief_.and.size(x, 1)>5) then
                    do i = 1, 3
                        write(unit_, "(*(A))") format_output_string(x_str(i, :), width_, brief_, sep_, max_elem_len)
                    end do
                    
                    write(unit_, "(*(A))") format_output_string( &
                        string_type(spread(":", 1, merge(size(x, 2), 5, size(x, 2) < 5))), &
                        width_, brief_, sep_, max_elem_len)
                    write(unit_, "(*(A))") format_output_string(x_str(size(x, 1), :), width_, brief_, sep_, max_elem_len)
                
                else
                    do i = 1, size(x, 1)
                        write(unit_, "(*(A))") format_output_string(x_str(i, :), width_, brief_, sep_, max_elem_len)
                    end do
                end if
                
            #:endif
        
        #:elif k1 == "string_type"
        
            #:if r1 == 0
                write(unit_, "(A)") format_output_string([x], width_, brief_, sep_, len(x))
            
            #:elif r1 == 1
                array_info = array_info_maker(size(x, 1))
                write(unit_, "(A)") format_output_string([array_info], width_, brief_, "", len(array_info))
                
                write(unit_, "(*(A))") format_output_string(x, width_, brief_, sep_, maxval(len(x)))
                
            #:elif r1 == 2
            
                array_info = array_info_maker(size(x, 1), size(x, 2))
                write(unit_, "(A)") format_output_string([array_info], width_, brief_, "", len(array_info))
                
                max_elem_len = maxval(len(x))
                
                #! Brief mode of rank-2 array
                if (brief_.and.size(x, 1)>5) then
                    do i = 1, 3
                        write(unit_, "(*(A))") format_output_string(x(i, :), width_, brief_, sep_, max_elem_len)
                    end do
                    
                    write(unit_, "(*(A))") format_output_string( &
                        string_type(spread(":", 1, merge(size(x, 2), 5, size(x, 2) < 5))), &
                        width_, brief_, sep_, max_elem_len)
                    write(unit_, "(*(A))") format_output_string(x(size(x, 1), :), width_, brief_, sep_, max_elem_len)
                    
                else
                    do i = 1, size(x, 1)
                        write(unit_, "(*(A))") format_output_string(x(i, :), width_, brief_, sep_, max_elem_len)
                    end do
                end if
                
            #:endif
        
        #:endif
        
    end subroutine disp_${r1}$_${t1[0]}$${k1}$
    #:endfor
    #:endfor
    
    !> Format output string
    pure function format_output_string(x, width, brief, sep, max_elem_len) result(str)
    
        type(string_type), intent(in) :: x(:)
        integer, intent(in) :: width
        logical, intent(in) :: brief
        character(len=*), intent(in) :: sep
        
        #! Maxium elementaral string length.
        integer, intent(in) :: max_elem_len
        
        #! Output string: brief, ingore width.
        character(merge((max(max_elem_len, 2)+len(sep))*min(size(x, 1), 5), width, brief)+2), allocatable :: str(:)
        
        character(:), allocatable :: buffer
        
        #! Elementaral string length
        character(max(max_elem_len, 2)+len(sep)) :: elem_buffer
        integer :: elem_len, num1, num2, i, j
        
        #! Make brief buffer
        if (brief) then
        
            allocate(str(1))
            buffer = ""
            
            if (size(x, 1) <= 5) then
            
                do i = 1, size(x, 1)
                    elem_buffer = char(x(i))//sep
                    buffer = buffer//elem_buffer
                end do
            
            else
                
                do i = 1, 3
                    elem_buffer = char(x(i))//sep
                    buffer = buffer//elem_buffer
                end do
                
                elem_buffer = ".."//sep
                buffer = buffer//elem_buffer
                
                elem_buffer = char(x(size(x, 1)))//sep
                buffer = buffer//elem_buffer
                
            end if
            
            str(1) = buffer
        
        #! Make full buffer
        else
        
            elem_len = len(elem_buffer)
            
            #! Elementaral string length > Print width
            num1 = merge(width/elem_len, 1, elem_len <= width)
            num2 = size(x, 1)/num1
            
            if (num2 > 1 .or. size(x, 1) > 1) then
                allocate(str(merge(num2, num2 + 1, mod(size(x, 1), num1)==0)))
                
                do i = 1, size(str) - 1
                    
                    buffer = ""
                    do j = 1, num1
                        elem_buffer = char(x((i-1)*num1+j))//sep
                        buffer = buffer//elem_buffer
                    end do
                    
                    #! Overlength elementaral string adjustment
                    if ( len(x((i-1)*num1+j-1)) > width-len(sep)-1 ) then
                        buffer(width-len(sep)-1:) = "**"//repeat(" ", len(sep))
                    end if
                    
                    str(i) = buffer
                    
                    #! Set continuation flags and line breaks
                    str(i)(width+1:) = "&"//new_line("")
                    
                end do
                
                buffer = ""
                do j = 1, merge(num1, mod(size(x, 1), num1), mod(size(x, 1), num1)==0)
                    elem_buffer = char(x((i-1)*num1+j))//sep
                    buffer = buffer//elem_buffer
                end do
                
                #! Overlength elementaral string adjustment
                if ( len(x((i-1)*num1+j-1)) > width-len(sep)-1 ) then
                    buffer(width-len(sep)-1:) = "**"//repeat(" ", len(sep))
                end if
                
                str(i) = buffer
            
            else
            
                allocate(str(1))
                buffer = ""
                do j = 1, size(x, 1)
                    elem_buffer = char(x(j))//sep
                    buffer = buffer//elem_buffer
                end do
                
                #! Overlength elementaral string adjustment
                if ( len(x(j-1)) > width-len(sep)-1 ) then
                    buffer(width-len(sep)-1:) = "**"//repeat(" ", len(sep))
                end if
                
                str(1) = buffer
                
            end if
            
        end if
        
    end function format_output_string
    
    !> Print array information
    pure type(string_type) function array_info_maker(m, n) result(info)
        integer, intent(in) :: m
        integer, intent(in), optional :: n
        
        if (present(n)) then
            info = string_type('[matrix size: ' // to_string(m) // '×' // to_string(n) // ']')
        else
            info = string_type('[vector size: ' // to_string(m) // ']')
        end if
        
    end function array_info_maker
    
    !> Display `character(*)` value.
    module subroutine disp_char(x, header, unit, brief, format, width, sep)
    
        character(*), intent(in), optional :: x
        character(len=*), intent(in), optional :: header
        integer, intent(in), optional :: unit
        logical, intent(in), optional :: brief
        character(len=*), intent(in), optional :: format
        integer, intent(in), optional :: width
        character(len=*), intent(in), optional :: sep
        
        integer :: unit_, width_
        logical :: brief_
        character(len=:), allocatable :: x_, sep_
        
        !> State default values
        x_      = optval(x, "")
        unit_   = optval(unit, output_unit)
        brief_  = optval(brief, .false.)
        width_  = optval(width, 80)
        width_  = merge(width_, 80, width_ > 80)
        sep_    = optval(sep, "  ")
            
        if (present(header)) then
            write(unit_, "(A)") format_output_string([string_type(header)], width_, brief_, "", len(header))
        end if
        
        write(unit_, "(A)") format_output_string([string_type(x_)], width_, brief_, sep_, len(x_))
        
    end subroutine disp_char

end submodule stdlib_io_disp