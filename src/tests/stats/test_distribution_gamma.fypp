#:set WITH_QP = False
#:set WITH_XDP = False
#:include "common.fypp"
#:set RC_KINDS_TYPES = REAL_KINDS_TYPES + CMPLX_KINDS_TYPES
module test_stats_distribution_gamma
    use testdrive, only : new_unittest, unittest_type, error_type, check
    use stdlib_kinds, only : sp, dp
    use stdlib_random, only : random_seed
    use stdlib_stats_distribution_gamma, only : rgamma => rvs_gamma,           &
                              gamma_pdf => pdf_gamma, gamma_cdf => cdf_gamma

    implicit none
    private

    public :: collect_stats_distribution_gamma

    #:for k1, t1 in REAL_KINDS_TYPES
    ${t1}$, parameter :: tol_${k1}$ = 1000 * epsilon(1.0_${k1}$)
    #:endfor




contains

    subroutine collect_stats_distribution_gamma(testsuite)
        type(unittest_type), allocatable, intent(out) :: testsuite(:)

        testsuite = [                                                          &
            new_unittest("gamma_random_generator", test_gamma_random_generator)&

        #:for k1, t1 in RC_KINDS_TYPES
            , new_unittest("gamma_rvs_${t1[0]}$${k1}$",                        &
                           test_gamma_rvs_${t1[0]}$${k1}$)                     &
        #:endfor

        #:for k1, t1 in RC_KINDS_TYPES
            , new_unittest("gamma_pdf_${t1[0]}$${k1}$",                        &
                           test_gamma_pdf_${t1[0]}$${k1}$)                     &
        #:endfor

        #:for k1, t1 in RC_KINDS_TYPES
            , new_unittest("gamma_cdf_${t1[0]}$${k1}$",                        &
                           test_gamma_cdf_${t1[0]}$${k1}$)                     &
        #:endfor
            ]
    end subroutine collect_stats_distribution_gamma



    subroutine test_gamma_random_generator(error)
        type(error_type), allocatable, intent(out) :: error
        integer, parameter :: num = 10000000, array_size = 1000
        integer :: i, j, freq(0 : array_size), put, get
        real(dp) :: chisq, expct
        character(80) :: ch1

        print *, ""
        print *, "Test gamma random generator with chi-squared"

        put = 1234567
        call random_seed(put, get)
        freq = 0

        do i = 1, num

            j = 1000 * gamma_cdf(rgamma(2.0,1.5),2.0,1.5)
            freq(j) = freq(j) + 1

        end do

        chisq = 0.0_dp
        expct = num / array_size

        do i = 0, array_size - 1

            chisq = chisq + (freq(i) - expct) ** 2 / expct

        end do

        write(ch1, '(f10.1)') chisq

        call check(error, chisq < 1143.9,                                       &
                   "gamma randomness failed chi-squared test.",                 &
                   "The critical values for chi-squared with 1000 dof is"//     &
                   " 1143.92. Chi-squared for gamma random generator is :"//    &
                   trim(ch1))

    end subroutine test_gamma_random_generator



    #:for k1, t1 in RC_KINDS_TYPES
    subroutine test_gamma_rvs_${t1[0]}$${k1}$(error)
        type(error_type), allocatable, intent(out) :: error
        integer, parameter :: k = 5, n = 10
        ${t1}$ :: res(n), gshape, scale
        integer :: i
        integer :: seed, get
    #:if t1[0] == "r"
      #! for real type
        ${t1}$ :: ans(n) = [0.85758907497718884_${k1}$,                        &
                            1.0206623865526090_${k1}$,                         &
                            0.99753931024198650_${k1}$,                        &
                            0.97653359790345839_${k1}$,                        &
                            0.41853482638322043_${k1}$,                        &
                            2.2012288073086310_${k1}$,                         &
                            2.0639542613306592_${k1}$,                         &
                            3.1794669730880192_${k1}$,                         &
                            1.9329744662223280_${k1}$,                         &
                            1.0257959670932111_${k1}$]
    #:else
      #! for complex type
        ${t1}$ :: ans(n) =                                                     &
                     [(1.0719863437214860_${k1}$, 0.46775532101393819_${k1}$), &
                     (0.42382516926807201_${k1}$, 0.96340496644915230_${k1}$), &
                      (2.7515360091357888_${k1}$, 0.14837198853150388_${k1}$), &
                      (1.4536367104245524_${k1}$, 0.56852736336951559_${k1}$), &
                (0.34559143458416125_${k1}$, 4.96217685362488267E-002_${k1}$), &
                      (1.9657884897696516_${k1}$,  3.1124314799641013_${k1}$), &
                 (3.4155160623540453_${k1}$, 5.04948933894018709E-002_${k1}$), &
                     (0.94594398345216302_${k1}$, 0.45691588305890624_${k1}$), &
                      (1.1493158751025965_${k1}$, 0.12944763723941669_${k1}$), &
                      (2.9691469633592282_${k1}$, 1.1617408197125874_${k1}$)]
    #:endif

        print *, "Test gamma_distribution_rvs_${t1[0]}$${k1}$"
        seed = 639741825
        call random_seed(seed, get)

    #:if t1[0] == "r"
      #! for real type
        gshape = 2.0_${k1}$; scale = 1.0_${k1}$
    #:else
      #! for complex type
        gshape = (2.0_${k1}$, 0.7_${k1}$); scale = (0.8_${k1}$, 1.2_${k1}$)
    #:endif

        do i = 1, k

            res(i) = rgamma(gshape, scale)

        end do

        res(k + 1 : n) = rgamma(gshape, scale, k)

        do i = 1, n

            call check(error, res(i), ans(i), "gamma_distribution_rvs_"//      &
                      "${t1[0]}$${k1}$ failed", thr = tol_${k1}$)

        end do
    end subroutine test_gamma_rvs_${t1[0]}$${k1}$

    #:endfor




    #:for k1, t1 in RC_KINDS_TYPES
    subroutine test_gamma_pdf_${t1[0]}$${k1}$(error)
        type(error_type), allocatable, intent(out) :: error
        ${t1}$ :: x1, x2(3,4), gshape, scale
        integer :: i
        integer :: seed, get
        real(${k1}$) :: res(15)
    #:if t1[0] == "r"
      #! for real type
        real(${k1}$), parameter :: ans(15) =                                   &
                                   [3.4495412572168718E-002_${k1}$,            &
                                    3.4495412572168718E-002_${k1}$,            &
                                    3.4495412572168718E-002_${k1}$,            &
                                    0.29116634347089576_${k1}$,                &
                                    0.28338290850731412_${k1}$,                &
                                    0.27922270935613586_${k1}$,                &
                                    0.36440665523348270_${k1}$,                &
                                    0.24379209619143699_${k1}$,                &
                                    6.3815638087140858E-002_${k1}$,            &
                                    0.25844600948718588_${k1}$,                &
                                    0.17268118913523497_${k1}$,                &
                                    0.31181223194308200_${k1}$,                &
                                    0.24027095040543087_${k1}$,                &
                                    0.36765502365831570_${k1}$,                &
                                    9.9011714088769673E-002_${k1}$]
    #:else
      #! for complex type
        real(${k1}$), parameter :: ans(15) =                                   &
                                   [0.11554282574059289_${k1}$,                &
                                    0.11554282574059289_${k1}$,                &
                                    0.11554282574059289_${k1}$,                &
                                    9.2682318951901529E-002_${k1}$,            &
                                    0.40166849087286088_${k1}$,                &
                                    0.37468980496232701_${k1}$,                &
                                    0.14712363446345342_${k1}$,                &
                                    0.22561628567985184_${k1}$,                &
                                    0.12765403024301181_${k1}$,                &
                                    3.9182498867847360E-002_${k1}$,            &
                                    2.5873533461032859E-003_${k1}$,            &
                                    0.10105832622792968_${k1}$,                &
                                    0.24044091896609490_${k1}$,                &
                                    4.9885356046115948E-003_${k1}$,            &
                                    0.11085827028639164_${k1}$]
    #:endif

        print *, "Test gamma_distribution_pdf_${t1[0]}$${k1}$"
        seed = 345987126
        call random_seed(seed, get)
    #:if t1[0] == "r"
      #! for real type
        gshape = 2.0_${k1}$; scale = 1.0_${k1}$
    #:else
      #! for complex type
        gshape = (2.0_${k1}$, 0.7_${k1}$); scale = (0.8_${k1}$, 1.2_${k1}$)
    #:endif

        x1 = rgamma(gshape, scale)
        x2 = reshape(rgamma(gshape, scale, 12), [3,4])
        res(1:3) = gamma_pdf(x1, gshape, scale)
        res(4:15) = reshape(gamma_pdf(x2, gshape, scale), [12])

        do i = 1, 15

                call check(error, res(i), ans(i), "gamma_distribution"// &
                           "_pdf_${t1[0]}$${k1}$ failed", thr = tol_${k1}$)

        end do
    end subroutine test_gamma_pdf_${t1[0]}$${k1}$

    #:endfor




    #:for k1, t1 in RC_KINDS_TYPES
    subroutine test_gamma_cdf_${t1[0]}$${k1}$(error)
        type(error_type), allocatable, intent(out) :: error
        ${t1}$ :: x1, x2(3,4), gshape, scale
        integer :: i
        integer :: seed, get
        real(${k1}$) :: res(15)
    #:if t1[0] == "r"
      #! for real type
        real(${k1}$), parameter :: ans(15) =                                   &
                                   [5.4876256610822634E-002_${k1}$,            &
                                    5.4876256610822634E-002_${k1}$,            &
                                    5.4876256610822634E-002_${k1}$,            &
                                    0.31541195839514946_${k1}$,                &
                                    0.38568161497244058_${k1}$,                &
                                    0.23220859761573376_${k1}$,                &
                                    0.39336687687155714_${k1}$,                &
                                    0.80559422971604655_${k1}$,                &
                                    0.88631934249921673_${k1}$,                &
                                    0.37667963185005432_${k1}$,                &
                                    0.14176369124149241_${k1}$,                &
                                    0.45590880930769767_${k1}$,                &
                                    0.27856937500418372_${k1}$,                &
                                    0.18103305981618728_${k1}$,                &
                                    0.72986385036366463_${k1}$]
    #:else
      #! for complex type
        real(${k1}$), parameter :: ans(15) =                                   &
                                   [3.2122120543510921E-002_${k1}$,            &
                                    3.2122120543510921E-002_${k1}$,            &
                                    3.2122120543510921E-002_${k1}$,            &
                                    0.20931149671160035_${k1}$,                &
                                    0.77957028981310350_${k1}$,                &
                                    0.17082639598330887_${k1}$,                &
                                    2.7594977080807291E-002_${k1}$,            &
                                    2.3794072479821078E-002_${k1}$,            &
                                    5.2298181677386930E-002_${k1}$,            &
                                    0.22327051157236336_${k1}$,                &
                                    0.27365315981967359_${k1}$,                &
                                    3.4968870668437825E-002_${k1}$,            &
                                    0.58026010546190465_${k1}$,                &
                                    0.23090402450867176_${k1}$,                &
                                    0.25072609802292339_${k1}$]
    #:endif

        print *, "Test gamma_distribution_cdf_${t1[0]}$${k1}$"
        seed = 567985123
        call random_seed(seed, get)

    #:if t1[0] == "r"
      #! for real type
        gshape = 2.0_${k1}$; scale = 2.0_${k1}$
    #:else
      #! for complex type
        gshape = (2.0_${k1}$, 0.7_${k1}$); scale = (0.8_${k1}$, 1.2_${k1}$)
    #:endif

        x1 = rgamma(gshape, scale)
        x2 = reshape(rgamma(gshape, scale, 12), [3,4])
        res(1:3) = gamma_cdf(x1, gshape, scale)
        res(4:15) = reshape(gamma_cdf(x2, gshape, scale), [12])

        do i = 1, 15

                call check(error, res(i), ans(i), "gamma_distribution"// &
                           "_cdf_${t1[0]}$${k1}$ failed", thr = tol_${k1}$)

        end do
    end subroutine test_gamma_cdf_${t1[0]}$${k1}$

    #:endfor

end module test_stats_distribution_gamma



program tester
    use, intrinsic :: iso_fortran_env, only : error_unit
    use testdrive, only : run_testsuite, new_testsuite, testsuite_type
    use test_stats_distribution_gamma, only : collect_stats_distribution_gamma
    implicit none
    integer :: stat, is
    type(testsuite_type), allocatable :: testsuites(:)
    character(len=*), parameter :: fmt = '("#", *(1x, a))'

    stat = 0

    testsuites = [new_testsuite("Stats_distribution_gamma",                    &
                  collect_stats_distribution_gamma)]

    do is = 1, size(testsuites)

        write(error_unit, fmt) "Testing:", testsuites(is) % name
        call run_testsuite(testsuites(is) % collect, error_unit, stat)

    end do

    if(stat > 0) then

        write(error_unit, '(i0, 1x, a)') stat, "test(s) failed!"
        error stop

    end if
end program tester
