module stdlib_experimental_stats

#:set VERSION90 = defined('VERSION90')
#:set REALKINDS = ["sp", "dp", "qp"]
#:set INTKINDS = ["int8", "int16", "int32", "int64"]
#:set REALTYPES = ["real({})".format(k) for k in REALKINDS]
#:set INTTYPES = ["integer({})".format(k) for k in INTKINDS]
#:set iktr = list(zip(range(len(REALKINDS)), REALKINDS, REALTYPES))
#:set ikti = list(zip(range(len(INTKINDS)), INTKINDS, INTTYPES))

use stdlib_experimental_kinds, only: sp, dp, qp, &
    int8, int16, int32, int64
implicit none
private
! Public API
public :: mean

interface mean
#:for i1, k1, t1 in iktr
    module function mean_1_${k1}$_${k1}$(x) result(res)
        ${t1}$, intent(in) :: x(:)
        ${t1}$ :: res
    end function mean_1_${k1}$_${k1}$
#:endfor

#:for i1, k1, t1 in ikti
    module function mean_1_${k1}$_dp(x) result(res)
        ${t1}$, intent(in) :: x(:)
        real(dp) :: res
    end function mean_1_${k1}$_dp
#:endfor


#:for i1, k1, t1 in iktr
    module function mean_2_all_${k1}$_${k1}$(x) result(res)
        ${t1}$, intent(in) :: x(:,:)
        ${t1}$ :: res
    end function mean_2_all_${k1}$_${k1}$
#:endfor

#:for i1, k1, t1 in ikti
    module function mean_2_all_${k1}$_dp(x) result(res)
        ${t1}$, intent(in) :: x(:,:)
        real(dp) :: res
    end function mean_2_all_${k1}$_dp
#:endfor

#:for i1, k1, t1 in iktr
    module function mean_2_${k1}$_${k1}$(x, dim) result(res)
        ${t1}$, intent(in) :: x(:,:)
        integer, intent(in) :: dim
        ${t1}$ :: res(size(x)/size(x, dim))
    end function mean_2_${k1}$_${k1}$
#:endfor

#:for i1, k1, t1 in ikti
    module function mean_2_${k1}$_dp(x, dim) result(res)
        ${t1}$, intent(in) :: x(:,:)
        integer, intent(in) :: dim
        real(dp) :: res(size(x)/size(x, dim))
    end function mean_2_${k1}$_dp
#:endfor


#:def ranksuffix(rank)
#{if rank > 0}#(${":" + ",:" * (rank - 1)}$)#{endif}#
#:enddef

#:if VERSION90
#:set ranks = range(3,8)
#:else
#:set ranks = range(3,16)
#:endif


#:for i1, k1, t1 in iktr
#:for rank in ranks
module function mean_${rank}$_all_${k1}$_${k1}$(x) result(res)
    ${t1}$, intent(in) :: x${ranksuffix(rank)}$
    ${t1}$ :: res
end function mean_${rank}$_all_${k1}$_${k1}$
#:endfor
#:endfor

#:for i1, k1, t1 in ikti
#:for rank in ranks
module function mean_${rank}$_all_${k1}$_dp(x) result(res)
    ${t1}$, intent(in) :: x${ranksuffix(rank)}$
    real(dp) :: res
end function mean_${rank}$_all_${k1}$_dp
#:endfor
#:endfor

#:for i1, k1, t1 in iktr
#:for rank in ranks
module function mean_${rank}$_${k1}$_${k1}$(x, dim) result(res)
    ${t1}$, intent(in) :: x${ranksuffix(rank)}$
    integer, intent(in) :: dim
    ${t1}$ :: res( &
#:for imerge in range(1,rank-1)
                  merge(size(x,${imerge}$),size(x,${imerge + 1}$),mask = ${imerge}$ < dim ), &
#:endfor
                  merge(size(x,${rank-1}$),size(x,${rank}$),mask = ${rank-1}$ < dim ) )
end function mean_${rank}$_${k1}$_${k1}$
#:endfor
#:endfor

#:for i1, k1, t1 in ikti
#:for rank in ranks
module function mean_${rank}$_${k1}$_dp(x, dim) result(res)
    ${t1}$, intent(in) :: x${ranksuffix(rank)}$
    integer, intent(in) :: dim
    real(dp) :: res( &
#:for imerge in range(1,rank-1)
                  merge(size(x,${imerge}$),size(x,${imerge + 1}$),mask = ${imerge}$ < dim ), &
#:endfor
                  merge(size(x,${rank-1}$),size(x,${rank}$),mask = ${rank-1}$ < dim ) )
end function mean_${rank}$_${k1}$_dp
#:endfor
#:endfor

end interface

end module
