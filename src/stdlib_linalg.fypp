#:include "common.fypp"
#:set RCI_KINDS_TYPES = REAL_KINDS_TYPES + CMPLX_KINDS_TYPES + INT_KINDS_TYPES
module stdlib_linalg
  !!Provides a support for various linear algebra procedures
  !! ([Specification](../page/specs/stdlib_linalg.html))
  use stdlib_kinds, only: sp, dp, qp, &
    int8, int16, int32, int64, lk, c_bool
  use stdlib_string_type, only: string_type
  implicit none
  private

  public :: diag
  public :: eye
  public :: trace
  public :: outer_product
  public :: zeros, ones, ex

  interface diag
    !! version: experimental
    !!
    !! Creates a diagonal array or extract the diagonal elements of an array
    !! ([Specification](../page/specs/stdlib_linalg.html#description))
      !
      ! Vector to matrix
      !
    #:for k1, t1 in RCI_KINDS_TYPES
      module function diag_${t1[0]}$${k1}$(v) result(res)
        ${t1}$, intent(in) :: v(:)
        ${t1}$ :: res(size(v),size(v))
      end function diag_${t1[0]}$${k1}$
    #:endfor
    #:for k1, t1 in RCI_KINDS_TYPES
      module function diag_${t1[0]}$${k1}$_k(v,k) result(res)
        ${t1}$, intent(in) :: v(:)
        integer, intent(in) :: k
        ${t1}$ :: res(size(v)+abs(k),size(v)+abs(k))
      end function diag_${t1[0]}$${k1}$_k
    #:endfor

      !
      ! Matrix to vector
      !
    #:for k1, t1 in RCI_KINDS_TYPES
      module function diag_${t1[0]}$${k1}$_mat(A) result(res)
        ${t1}$, intent(in) :: A(:,:)
        ${t1}$ :: res(minval(shape(A)))
      end function diag_${t1[0]}$${k1}$_mat
    #:endfor
    #:for k1, t1 in RCI_KINDS_TYPES
      module function diag_${t1[0]}$${k1}$_mat_k(A,k) result(res)
        ${t1}$, intent(in) :: A(:,:)
        integer, intent(in) :: k
        ${t1}$ :: res(minval(shape(A))-abs(k))
      end function diag_${t1[0]}$${k1}$_mat_k
    #:endfor
  end interface


  ! Matrix trace
  interface trace
    !! version: experimental
    !!
    !! Computes the trace of a matrix
    !! ([Specification](../page/specs/stdlib_linalg.html#description_2))
    #:for k1, t1 in RCI_KINDS_TYPES
      module procedure trace_${t1[0]}$${k1}$
    #:endfor
  end interface


  ! Outer product (of two vectors)
  interface outer_product
    !! version: experimental
    !!
    !! Computes the outer product of two vectors, returning a rank-2 array
    !! ([Specification](../page/specs/stdlib_linalg.html#description_3))
    #:for k1, t1 in RCI_KINDS_TYPES
      pure module function outer_product_${t1[0]}$${k1}$(u, v) result(res)
        ${t1}$, intent(in) :: u(:), v(:)
        ${t1}$ :: res(size(u),size(v))
      end function outer_product_${t1[0]}$${k1}$
    #:endfor
  end interface outer_product

    !> Version: experimental
    !>
    !> `ones` creates an vector or matrix of `integer` type and given shape, 
    !>  with a `1` value. 
    interface ones
        pure module function ones_1_default(dim) result(result)
            integer, intent(in) :: dim
            integer :: result(dim)
        end function ones_1_default
        pure module function ones_2_default(dim1, dim2) result(result)
            integer, intent(in) :: dim1, dim2
            integer :: result(dim1, dim2)
        end function ones_2_default
    end interface ones
    
    !> Version: experimental
    !>
    !> `zeros` creates an vector or matrix of `integer` type and given shape, 
    !>  with a `0` value.  
    interface zeros
        pure module function zeros_1_default(dim) result(result)
            integer, intent(in) :: dim
            integer :: result(dim)
        end function zeros_1_default
        pure module function zeros_2_default(dim1, dim2) result(result)
            integer, intent(in) :: dim1, dim2
            integer :: result(dim1, dim2)
        end function zeros_2_default
    end interface zeros

    !> Version: experimental
    !>
    !> `ex` creates an vector or matrix of `integer/logical/real/complex/string_type` type and given shape, 
    !>  with an `value` value.  
    interface ex
        #:set ALL_KINDS_TYPES = REAL_KINDS_TYPES + INT_KINDS_TYPES + CMPLX_KINDS_TYPES &
            & + LOG_KINDS_TYPES + STRING_KINDS_TYPES
        #:for k1, t1 in ALL_KINDS_TYPES
        pure module function ex_1_${t1[0]}$_${k1}$(value, dim) result(result)
            ${t1}$, intent(in) :: value
            integer, intent(in) :: dim
            ${t1}$ :: result(dim)
        end function ex_1_${t1[0]}$_${k1}$
        pure module function ex_2_${t1[0]}$_${k1}$(value, dim1, dim2) result(result)
            ${t1}$, intent(in) :: value
            integer, intent(in) :: dim1, dim2
            ${t1}$ :: result(dim1, dim2)
        end function ex_2_${t1[0]}$_${k1}$
        #:endfor
    end interface ex

contains

    function eye(n) result(res)
      !! version: experimental
      !!
      !! Constructs the identity matrix
      !! ([Specification](../page/specs/stdlib_linalg.html#description_1))
      integer, intent(in) :: n
      integer(int8) :: res(n, n)
      integer :: i
      res = 0
      do i = 1, n
         res(i, i) = 1
      end do
    end function eye


    #:for k1, t1 in RCI_KINDS_TYPES
      function trace_${t1[0]}$${k1}$(A) result(res)
        ${t1}$, intent(in) :: A(:,:)
        ${t1}$ :: res
        integer :: i
        res = 0
        do i = 1, minval(shape(A))
          res = res + A(i,i)
        end do
      end function trace_${t1[0]}$${k1}$
    #:endfor
end module
